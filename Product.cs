//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NicoleProvanFinalExam
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Product
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.SalesInvoices = new HashSet<SalesInvoice>();
        }

        public int ProductNum { get; set; }
        public string Descr { get; set; }
        public string ProductType { get; set; }
        public Nullable<decimal> MSRP { get; set; }
        public Nullable<int> Onhand { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<SalesInvoice> SalesInvoices { get; set; }


        public static void GetProductTypes()
        {
            using (var context = new FinalExamEntities())
            {
                var result = context.Products.Select(item => item.ProductType).Distinct();

                int i = 1;
                foreach (var item in result)
                {
                    Console.WriteLine($"{i}: {item}");
                    i++;
                }

            }
        }

        public static void ProductsAvailable(string prodType)
        {
            using (var context = new FinalExamEntities())
            {
                var result = context.Products.Where(item => item.ProductType == prodType).Select(item => item.Descr).Distinct();

                int i = 1;
                foreach (var item in result)
                {
                    Console.WriteLine($"{i}: {item}");
                    i++;
                }

            }
        }

        public static void DisplayPrice(string productSelection)
        {
            using (var context = new FinalExamEntities())
            {
                var result = context.Products.Where(item => item.Descr == productSelection).Select(item => item.MSRP).Distinct();

                foreach (var item in result)
                {
                    Console.WriteLine($"{productSelection}: {item}");
                }

            }
        }

        public static void ValidateQuantity(int quantity, string itemChoice, int id)
        {

            if (quantity > 0)
            {

                using (var context = new FinalExamEntities())
                {
                    var result = context.Products.Where(item => item.Descr == itemChoice).Select(item => item.Onhand).FirstOrDefault();

                    if (result >= quantity)
                    {

                        //insert record in Sales
                        Sale.NewSale(id);

                        //insert record in SalesInvoice
                        SalesInvoice.NewSaleInvoice(id, quantity, itemChoice);

                        //reduce onhand by quantity purchased
                        var prod = context.Products.Where(item => item.Descr == itemChoice).FirstOrDefault<Product>();
                        prod.Onhand = prod.Onhand - quantity;
                        context.SaveChanges();
                        Console.WriteLine("Thank you for your purchase!");

                    }
                    else
                    {
                        Console.WriteLine("Sorry, not enough stock.");
                    }
                }
            }
            else
            {
                Console.WriteLine("Sorry, quantity must be greater than 0.");
            }
        }
    }

}

